package com.customfit.ctg.view;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.beans.*;
import java.io.Serializable;
import javax.swing.ImageIcon;
import javax.swing.JPanel;

/**
 * StarVotingPanel is a rating voting JPanel that displays a number of
 * stars for scoring something.
 * 
 * @author David
 */
public class StarVotingPanel extends JPanel implements Serializable {
    
    /**
     * Number of stars to use.
     */
    private int scale = 1;
    public static final String PROP_SCALE = "scale";
    private PropertyChangeSupport scaleSupport;
    
    /**
     * Number of stars to score.
     */
    private int score = 0;
    public static final String PROP_SCORE = "score";
    private PropertyChangeSupport scoreSupport;

    ImageIcon imageIconStarOff;
    ImageIcon imageIconStarOn;

    /** Creates new form StarVotingPanel */
    public StarVotingPanel() {
        initComponents();
        scaleSupport = new PropertyChangeSupport(this);
        scoreSupport = new PropertyChangeSupport(this);
        this.imageIconStarOff = new ImageIcon(getClass().getResource("/art/export/star-off.png"));
        this.imageIconStarOn = new ImageIcon(getClass().getResource("/art/export/star-on.png"));
        this.setPreferredSize(new Dimension(this.imageIconStarOff.getIconWidth()*this.score, this.imageIconStarOff.getIconHeight()));
        this.setMinimumSize(new Dimension(this.imageIconStarOff.getIconWidth()*this.score, this.imageIconStarOff.getIconHeight()));
        this.setMaximumSize(new Dimension(this.imageIconStarOff.getIconWidth()*this.score, this.imageIconStarOff.getIconHeight()));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                formMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 17, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private int mousePositionToScoreValue(java.awt.event.MouseEvent evt)
    {
        return new Double(Math.ceil(new Integer(evt.getX()).doubleValue() / new Integer(this.imageIconStarOff.getIconWidth()).doubleValue())).intValue();
    }
    
    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
        this.paintScore(this.getGraphics(), mousePositionToScoreValue(evt));
    }//GEN-LAST:event_formMouseEntered

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        this.paintScore(this.getGraphics(), mousePositionToScoreValue(evt));
    }//GEN-LAST:event_formMouseMoved

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        //if right click, erase the score
        if (evt.getButton() != MouseEvent.BUTTON1)
        {
            this.score = 0;
            this.repaint();
        }
        //otherwise set the score
        else this.score = mousePositionToScoreValue(evt);
    }//GEN-LAST:event_formMousePressed

    private void formMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseExited
        //make sure we are on the right star
        this.repaint();
    }//GEN-LAST:event_formMouseExited


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    /**
     * Gets the scale currently in use. (The number of stars displayed.)
     * @return The scale.
     */
    public int getScale() {
        return this.scale;
    }

    /**
     * Sets the scale to use. (The number of stars to display.)
     * @param scale The scale.
     */
    public void setScale(int scale) {
        int oldScale = scale;
        this.scale = scale;
        this.setPreferredSize(new Dimension(this.imageIconStarOff.getIconWidth()*this.scale, this.imageIconStarOff.getIconHeight()));
        this.setMinimumSize(new Dimension(this.imageIconStarOff.getIconWidth()*this.scale, this.imageIconStarOff.getIconHeight()));
        this.setMaximumSize(new Dimension(this.imageIconStarOff.getIconWidth()*this.scale, this.imageIconStarOff.getIconHeight()));
        this.repaint();
        scoreSupport.firePropertyChange(PROP_SCALE, oldScale, scale);
    }
    
    /**
     * Gets the current score. (Number of stars checked.)
     * @return The score.
     */
    public int getScore() {
        return this.score;
    }

    /**
     * Sets the current score. (Number of stars checked.)
     * @param score The score.
     */
    public void setScore(int score) {
        int oldScore = score;
        this.score = score;
        this.repaint();
        scoreSupport.firePropertyChange(PROP_SCORE, oldScore, score);
    }
    
    /**
     * Sets the current score by rating.
     * @param percentage Percentage of checked stars.
     */
    public void setRating(double percentage) {
        this.score = new Double(Math.ceil(this.scale * percentage)).intValue();
    }
    
    /**
     * Gets the rating by dividing score / scale.
     * @param percentage Percentage of checked stars.
     */
    public double getRating() {
        return new Integer(this.score).doubleValue() / new Integer(this.scale).doubleValue();
    }

    @Override
    public void paint(Graphics g)
    {
        paintScore(g, this.score);
    }
    
    public void paintScore(Graphics g, int score)
    {
        //do superclass first
        super.paint(g);
        //for each star
        for (int s = 0; s < this.scale; s++)
        {
            //is checked
            if (s < score)
            {
                //draw bright star
                if (this.imageIconStarOn != null)
                    imageIconStarOn.paintIcon(this, g, s*this.imageIconStarOn.getIconWidth(), 0);
            }
            //isn't checked
            else
            {
                //draw gray star
                if (this.imageIconStarOff != null)
                    imageIconStarOff.paintIcon(this, g, s*this.imageIconStarOff.getIconWidth(), 0);
            }
        }
    }

    public void addScaleChangeListener(PropertyChangeListener listener) {
        scaleSupport.addPropertyChangeListener(listener);
    }

    public void removeScaleChangeListener(PropertyChangeListener listener) {
        scaleSupport.removePropertyChangeListener(listener);
    }
    
    public void addScoreChangeListener(PropertyChangeListener listener) {
        scoreSupport.addPropertyChangeListener(listener);
    }

    public void removeScoreChangeListener(PropertyChangeListener listener) {
        scoreSupport.removePropertyChangeListener(listener);
    }
}